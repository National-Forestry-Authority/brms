<?php

/**
 * @file
 * Contains brms_common.module.
 */

use Drupal\brms_common\DimensionCompute;
use Drupal\brms_common\NaturalBoundaryLength;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\user\UserInterface;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function brms_common_form_node_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  // Make fields read-only for all except administrator role.
  if (!\Drupal::currentUser()->hasPermission('edit nfa readonly field')) {
    switch ($form_id) {
      case 'node_forest_reserve_edit_form':
        $form['title']['#disabled'] = TRUE;
        $form['forest_reserve_type']['#disabled'] = TRUE;
        $form['gazetted_area']['#disabled'] = TRUE;
        $form['gazetted_area_2']['#disabled'] = TRUE;
        break;

      default:
        break;
    }
  }
  // NFA global id is always read-only.
  if ($form_id == 'node_forest_reserve_edit_form') {
    $form['nfa_sites_global_id']['#disabled'] = TRUE;
  }

}

/**
 * Implements hook_entity_bundle_field_info().
 */
function brms_common_entity_bundle_field_info(EntityTypeInterface $entity_type, $bundle, array $base_field_definitions): array {
  // Add computed fields to the forest reserve bundle.
  $fields = [];
  if ($entity_type->id() === 'node' && $bundle === 'forest_reserve') {
    // @todo add a field for the total area of the forest reserve.
    // See DimensionCompute.php#L84
//    $fields['total_area_computed'] = BaseFieldDefinition::create('decimal')
//      ->setName('total_area_computed')
//      ->setLabel(t('Total area (ha)'))
//      ->setComputed(TRUE)
//      ->setDisplayConfigurable('view', TRUE)
//      ->setSettings([
//        'suffix' => ' ha',
//        'metric' => 'area',
//      ])
//      ->setClass(DimensionCompute::class);

    $fields['total_boundary_length_computed'] = BaseFieldDefinition::create('decimal')
      ->setName('total_boundary_length_computed')
      ->setLabel(t('Total boundary length (km)'))
      ->setComputed(TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setSettings([
        'suffix' => ' km',
        'metric' => 'length',
      ])
      ->setClass(DimensionCompute::class);

    $fields['shoreline_length_computed'] = BaseFieldDefinition::create('decimal')
      ->setName('shoreline_length_computed')
      ->setLabel(t('Shoreline length (km)'))
      ->setComputed(TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setSettings([
        'suffix' => ' km',
        'metric' => 'length',
      ])
      ->setClass(DimensionCompute::class);

    $fields['interprotected_area_length_computed'] = BaseFieldDefinition::create('decimal')
      ->setName('interprotected_area_length_computed')
      ->setLabel(t('Inter protected area length (km)'))
      ->setComputed(TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setSettings([
        'suffix' => ' km',
        'metric' => 'length',
      ])
      ->setClass(DimensionCompute::class);

    $fields['interprotected_area_riverline_length_computed'] = BaseFieldDefinition::create('decimal')
      ->setName('interprotected_area_riverline_length_computed')
      ->setLabel(t('Inter protected area riverline length (km)'))
      ->setComputed(TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setSettings([
        'suffix' => ' km',
        'metric' => 'length',
      ])
      ->setClass(DimensionCompute::class);

    $fields['riverline_length_computed'] = BaseFieldDefinition::create('decimal')
      ->setName('riverline_length_computed')
      ->setLabel(t('Riverline length (km)'))
      ->setComputed(TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setSettings([
        'suffix' => ' km',
        'metric' => 'length',
      ])
      ->setClass(DimensionCompute::class);

    $fields['cutline_length_computed'] = BaseFieldDefinition::create('decimal')
      ->setName('cutline_length_computed')
      ->setLabel(t('Cutline length (km)'))
      ->setComputed(TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setSettings([
        'suffix' => ' km',
        'metric' => 'length',
      ])
      ->setClass(DimensionCompute::class);

    $fields['wetland_length_computed'] = BaseFieldDefinition::create('decimal')
      ->setName('wetland_length_computed')
      ->setLabel(t('Wetland length (km)'))
      ->setComputed(TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setSettings([
        'suffix' => ' km',
        'metric' => 'length',
      ])
      ->setClass(DimensionCompute::class);

    $fields['international_length_computed'] = BaseFieldDefinition::create('decimal')
      ->setName('international_length_computed')
      ->setLabel(t('International length (km)'))
      ->setComputed(TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setSettings([
        'suffix' => ' km',
        'metric' => 'length',
      ])
      ->setClass(DimensionCompute::class);

    $fields['natural_boundary_length_computed'] = BaseFieldDefinition::create('decimal')
      ->setName('natural_boundary_length_computed')
      ->setLabel(t('Natural boundary length (km)'))
      ->setComputed(TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setSettings(['suffix' => 'km'])
      ->setClass(NaturalBoundaryLength::class);

    $fields['intermediate_pillar_computed'] = BaseFieldDefinition::create('integer')
      ->setName('intermediate_pillar_computed')
      ->setLabel(t('Intermediate pillars'))
      ->setComputed(TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setSettings([
        'metric' => 'points',
      ])
      ->setClass(DimensionCompute::class);

    $fields['corner_pillar_computed'] = BaseFieldDefinition::create('integer')
      ->setName('corner_pillar_computed')
      ->setLabel(t('Corner pillars'))
      ->setComputed(TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setSettings([
        'metric' => 'points',
      ])
      ->setClass(DimensionCompute::class);

    $fields['fd_numbered_markstone_computed'] = BaseFieldDefinition::create('integer')
      ->setName('fd_numbered_markstone_computed')
      ->setLabel(t('FD numbered markstones'))
      ->setComputed(TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setSettings([
        'metric' => 'points',
      ])
      ->setClass(DimensionCompute::class);

    $fields['cairn_computed'] = BaseFieldDefinition::create('integer')
      ->setName('cairn_computed')
      ->setLabel(t('Cairns'))
      ->setComputed(TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setSettings([
        'metric' => 'points',
      ])
      ->setClass(DimensionCompute::class);
  }
  return $fields;
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function brms_common_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  // Make sure the NFA global id is unique.
  if ($entity_type->id() === 'node' && $bundle === 'forest_reserve') {
    if (isset($fields['nfa_sites_global_id'])) {
      $fields['nfa_sites_global_id']->addConstraint('UniqueField');
    }
  }
  if ($entity_type->id() === 'node' && $bundle === 'aerial_photos') {
    if (isset($fields['field_record_no'])) {
      $fields['field_record_no']->addConstraint('UniqueFieldPerBundle');
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function brms_common_views_pre_render(ViewExecutable $view) {
  // Render a map attachment above the forest reserves views.
  if ($view->id() == 'forest_reserves') {
    $map_settings = [];

    // Pass the same exposed filters to the geojson view.
    $exposed_filters = $view->getExposedInput();

    // Add a layer for all layer types by passing the type term id to the map
    // settings.
    $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')
      ->loadTree('layer_type', 0, NULL, TRUE);

    if ($terms) {
      $layer_types = [];
      foreach ($terms as $term) {
        /** @var \Drupal\taxonomy\Entity\term $term */
        if ($term->layer_group->value == 'feature') {
          $layer_types[] = [
            'url' => 'geolayer/geojson/layertype/' . $term->id(),
            'label' => $term->getName(),
            'group' => t('Forest reserve features'),
          ];
        }
        elseif ($term->layer_group->value == 'survey') {
          $layer_types[] = [
            'url' => 'survey/geolayer/geojson/layertype/' . $term->id(),
            'label' => $term->getName(),
            'group' => t('Forest reserve surveys'),
          ];
        }
      }

      $map_settings = [
        'layer_types' => $layer_types,
        'filters' => $exposed_filters,
      ];
    }

    // Add the base map layers.
    $storage = \Drupal::entityTypeManager()->getStorage('node');
    $entity_ids = $storage->getQuery()
      ->condition('type', 'map_base_layer')
      ->condition('status', TRUE)
      ->condition('common_base_layer', TRUE)
      ->accessCheck(TRUE)
      ->execute();
    $entities = $storage->loadMultiple($entity_ids);
    foreach ($entities as $entity) {
      $base_map_urls[] = [
        'url' => 'baselayer/geojson/' . $entity->id(),
        'layer_name' => $entity->getTitle(),
      ];
    }
    $map_settings['base_map_urls'] = $base_map_urls ?? NULL;

    // Build the map render array.
    $map = [
      '#type' => 'geolayer_map',
      '#map_type' => 'default',
      '#map_settings' => $map_settings,
      '#behaviors' => [
        'geojson_layer_type',
        'geojson_basemaps',
        'popup',
      ],
    ];

    // Render the map.
    $view->attachment_before['forest_reserves_map'] = $map;
  }
}

/**
 * Implements hook_user_login().
 *
 * Redirect to home page on login.
 */
function brms_common_user_login(UserInterface $account) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  error_log(print_r($route_name, TRUE));
  // Ignore the password reset route.
  if ($route_name !== 'user.reset.login') {
    // Do not interfere if a destination was already set.
    $current_request = \Drupal::service('request_stack')->getCurrentRequest();
    if (!$current_request->query->get('destination')) {
      // Default login destination to the home page.
      $current_request->query->set(
        'destination', Url::fromRoute('<front>')->toString()
      );
    }
  }
}

